apiVersion: v1
kind: Namespace
metadata:
  name: targetns

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: targetsa
  namespace: targetns

---
apiVersion: v1
kind: Secret
metadata:
  name: targetsecret
  namespace: targetns
  annotations:
    kubernetes.io/service-account.name: targetsa
type: kubernetes.io/service-account-token

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: targetcr
rules:
  - apiGroups: ['apps']
    resources: ['deployment']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: targetcrb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: targetcr
subjects:
  - kind: ServiceAccount
    name: targetsa
    namespace: targetns

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: false-automount
  namespace: targetns
spec:
  selector:
    matchLabels:
      app: false-automount
  replicas: 1
  template:
    metadata:
      labels:
        app: false-automount
    spec:
      serviceAccountName: targetsa
      automountServiceAccountToken: false
      containers:
        - name: false-automount
          image: 'nginx:latest'
          imagePullPolicy: Always
          securityContext:
            # runAsNonRoot: true
            # runAsUser: 10001
            # runAsGroup: 10001
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                # - ALL
                - NET_RAW
              add:
                - NET_BIND_SERVICE
            # readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          # resources:
          #   limits:
          #     cpu: '1'
          #     memory: '512Mi'
          #   requests:
          #     cpu: '1'
          #     memory: '512Mi'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: true-automount
  namespace: targetns
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      serviceAccountName: targetsa
      containers:
        - name: nginx
          image: 'nginx:latest'
          imagePullPolicy: Always
          securityContext:
            #runAsNonRoot: true # [emerg] 1#1: mkdir() "/var/cache/nginx/client_temp" failed (13: Permission denied)
            # runsAsNonRoot만 하고 runAsUser를 주지 않으면 CreateContainerConfgiError가 발생한다.
            #runAsUser: 10001 # # [emerg] 1#1: mkdir() "/var/cache/nginx/client_temp" failed (13: Permission denied)
            runAsGroup: 10001
            #fsGroup: 10001
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                #- ALL # [emerg] 1#1: chown("/var/cache/nginx/client_temp", 101) failed (1: Operation not permitted)
                - NET_RAW
              add:
                - NET_BIND_SERVICE
            #readOnlyRootFilesystem: true # [emerg] 1#1: mkdir() "/var/cache/nginx/client_temp" failed (30: Read-only file system)
            seccompProfile:
              type: RuntimeDefault
          resources:
            #limits:
            #  cpu: '1'
            #  memory: '512Mi'
            #requests:
            #  cpu: '1'
            #  memory: '512Mi'
---
apiVersion: v1
kind: Service
metadata:
  name: targetpod
  namespace: targetns
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: http
  externalIPs:
    - 192.168.1.15
---

